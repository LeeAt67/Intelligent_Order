---
description: Mobile-first React app with Vite, React Vant UI components, and Zustand state management
globs:
  - "src/**/*.{js,jsx}"
  - "src/**/*.{css,module.css}"
  - "*.config.js"
alwaysApply: true
---

# Intelligent Order React App 自定义规则

## 项目特定规范

### 移动端优先开发

- 始终使用 React Vant 组件库，确保移动端体验
- 使用 rem 单位，基于 iPhone 6 参考 (1rem = 37.5px)
- 所有组件都要考虑触摸交互和响应式设计

### 组件开发模式

```javascript
// 页面组件标准模板
import React from "react";
import { NavBar } from "react-vant";
import useTitle from "@/hooks/useTitle";
import styles from "./index.module.css";

const ComponentName = () => {
  useTitle("页面标题");

  return (
    <div className={styles.container}>
      <NavBar title="页面标题" />
      {/* 页面内容 */}
    </div>
  );
};

export default ComponentName;
```

### 状态管理规范

- 全局状态使用 Zustand
- 组件内部状态使用 useState
- 异步操作统一在 stores 中处理

### 路由布局规范

- 主页面使用 `MainLayout` (带 TabBar)
- 独立页面使用 `BlankLayout` (登录、弹窗等)
- 路由懒加载使用 React.lazy()

### CSS Modules 规范

- 类名使用 camelCase
- 通过 `styles.className` 访问
- 组合类名：`className={`${styles.base} ${styles.active}`}`

### 导入顺序

1. React 和第三方库
2. 布局组件
3. React Vant UI 组件
4. 自定义组件
5. Hooks 和工具函数
6. 样式文件（最后）

### API 规范

- 使用 axios 进行 HTTP 请求
- API 函数放在 `src/api/` 目录
- 开发环境使用 vite-plugin-mock 模拟数据

### 错误处理

- 使用 React Vant 的 Toast 显示消息
- 实现错误边界组件
- 网络错误统一处理

### 代码质量

- 遵循 ESLint 配置规则
- 支持中英文注释
- 使用 JSDoc 文档化复杂函数
- 移动端特定实现需要详细注释

当编写代码时，请严格遵循以上规范，确保代码的一致性和移动端用户体验。
